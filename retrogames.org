* Environment Setup
** Installing Linux

If you already have a Linux box, then move on to the next section.

This project is best used from a Linux box, or at least from a Mac if
you really cannot use a Linux. If you are serious about computers and
computer science, a Linux partition (or at least a Linux virtual
machine) is mandatory.  

*** Installing Linux in a partition
Installing Linux in a partition is the most classical approach. Then,
Linux and Windows (or Mac) will share the space on your hard disk, and
you'll have to chose between Linux and Windows when the machine
starts. This approach is advised as you get a "real" Linux, with no
limitation. If you don't know which distribution of Linux to chose
then pick a Ubuntu, but that's not mandatory. I use Debian myself and
many of my friends use Arch Linux or even a venerable Gentoo.

Installing Linux is not very complex nowadays. You should find at
least 20 Gb on your hard disk, backup all your data, download an iso
image of the chosen distribution, burn it on a CD, DVD or USB key, and
reboot your machine. For Ubuntu, the documentation is [[https://help.ubuntu.com/community/CommunityHelpWiki][here]]. Make it
simple for the first time

And remember *backup your data before installing Linux*. The
installation is not dangerous if you make it right. But there is no
protection here: there is many harmful mistakes that you could do in
the process.

*** Installing Linux in a virtual machine
If you want to launch Windows and Linux applications at the same time,
then you have to put either Windows and Linux in a virtual
machine. That guest OS (the one within the VM) will run as an
application of the host OS (the one out of the VM, running on the real
computer). 

Using a VM is not optimal: both OS share the memory and CPU (so you
turn a nice computer into two laggy machines), some mouse and
keyboards actions are intercepted by the host OS and thus not possible
within the VM. But that's still an interesting approach for the first weeks.

I have several Windows VM on my Linux computer (to test my apps on
Windows), but I guess that you want to install Linux in a VM on your
Windows. I'm not very fluent on Windows but there is a plenty of
tutorials for that. Here is [[http://www.wikihow.com/Install-Ubuntu-on-VirtualBox][one]]. It's maybe a bit old (not sure) but
seems very detailed. If you have a better one, please drop me an email.

*** Booting Linux from a USB stick

If you're really short on space on your disk (and cannot make any
room), they you can install Linux on an USB stick. The advantage is
that you can have your Linux always with you, and use it on several
computers. The main drawback is that it is very demanding on the USB
stick. The cheap sticks that you get as goodies here and there will be
slow and break soon, eating all your data! Make sure to use a correct
stick, and to regularly backup your data.

[[http://clefagreg.dnsalias.org/8.0/][ClefAgreg]] is a very pleasant solution to build such an USB stick (in
French only, sorry). This is the technical solution used for the
Informatics option of the Maths [[https://en.wikipedia.org/wiki/Agr%C3%A9gation][Agr√©gation]]. So it is well tested and
very robust, while making it very easy to add new software to the
stick.

[[https://tails.boum.org/][TAILS]] is another solution for Live USB Linux. The main goal of that
project is not to easily create a development environment, but it
offers all the features that we need, with a [[https://tails.boum.org/doc/first_steps/persistence/][persistent storage]] on the
USB stick, and the ability to [[https://tails.boum.org/doc/advanced_topics/additional_software/][add extra softwares to the system]]
(although less efficiently than ClefAgreg). It seems to be more
active and better maintained.

I cannot tell for sure: I have a real Linux partition and don't use
such solution very often.

** Installing a decent editor

You only need a Python programming environment, with an adapted code
editor and the Python runtime. There are many sensible editors out
there, and you should search for the one that you prefer.

I often use [[http://www.eclipse.org][Eclipse]] myself (pick the Java version, then add the [[http://marketplace.eclipse.org/content/pydev-python-ide-eclipse][PyDev]]
plugin -- prefer a manual download to an Ubuntu package). Agreed, that
software is huge (more than 1.5Gb of RAM), and it's easy to get lost
when you start with it. But if you want to dig a swimming pool, will
you get a light and nice spoon, or an heavy excavator?

Real hackers will certainly prefer Vim. You can be certain that it is
installed on every Unix box that you will ever encounter. Even if I
don't use it when I have the choice, I learned its basic usage over
the years. This [[http://vim-adventures.com/][online game]] constitutes a perfect introduction to
Vim. And it's fun too, so you can play it even if you don't plan to
use Vim on a day-to-day basis :)

When not using Eclipse, I'm an happy [[https://www.gnu.org/software/emacs/][Emacs]] user. That's another
venerable editor (both emacs and Vim came out in 1976), which main
feature is its configuration power: you can do everything in emacs,
provided that you configured it correctly, or developed the right
plugin. But that's also its main drawback: configuring the perfect
environment can become rather time consuming. For now, if you go for
emacs (which would earn you my respect), you should just add the
following to the file ~/.emacs to enable Ctrl-C and friends.
#+BEGIN_SRC 
(cua-mode t)
#+END_SRC

** Installing Python 3

Now, I'm assuming that you are using an Ubuntu/Debian system. If not,
then read again the previous sections.

Open a console, and simply type the following. It should grab all the
needed dependencies.

#+BEGIN_SRC 
sudo apt-get install python3-tk 
#+END_SRC

** Installing the game engine
Simply download [[http://pages.cpsc.ucalgary.ca/~aycock/engine.tar.gz][the archive]] from the author site, and unpack it
somewhere on your computer, and you're set. You can start writing your
first game.
